/**
 *
 *  Jbcy2569520.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Jbcy2569520.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::maxyun;

const std::string Jbcy2569520::Cols::_objectid = "\"objectid\"";
const std::string Jbcy2569520::Cols::_bsm = "\"bsm\"";
const std::string Jbcy2569520::Cols::_ysdm = "\"ysdm\"";
const std::string Jbcy2569520::Cols::_xzqdm = "\"xzqdm\"";
const std::string Jbcy2569520::Cols::_xzqmc = "\"xzqmc\"";
const std::string Jbcy2569520::Cols::_mc = "\"mc\"";
const std::string Jbcy2569520::Cols::_lx = "\"lx\"";
const std::string Jbcy2569520::Cols::_cdjb = "\"cdjb\"";
const std::string Jbcy2569520::Cols::_mj = "\"mj\"";
const std::string Jbcy2569520::Cols::_ccl = "\"ccl\"";
const std::string Jbcy2569520::Cols::_zxl = "\"zxl\"";
const std::string Jbcy2569520::Cols::_bz = "\"bz\"";
const std::string Jbcy2569520::Cols::_cddb = "\"cddb\"";
const std::string Jbcy2569520::Cols::_shape_length = "\"shape_length\"";
const std::string Jbcy2569520::Cols::_shape_area = "\"shape_area\"";
const std::string Jbcy2569520::Cols::_shape = "\"shape\"";
const std::string Jbcy2569520::primaryKeyName = "objectid";
const bool Jbcy2569520::hasPrimaryKey = true;
const std::string Jbcy2569520::tableName = "\"jbcy_2569520\"";

const std::vector<typename Jbcy2569520::MetaData> Jbcy2569520::metaData_={
{"objectid","int32_t","integer",4,1,1,1},
{"bsm","std::string","character varying",18,0,0,0},
{"ysdm","std::string","character varying",10,0,0,0},
{"xzqdm","std::string","character varying",12,0,0,0},
{"xzqmc","std::string","character varying",100,0,0,0},
{"mc","std::string","character varying",100,0,0,0},
{"lx","std::string","character varying",2,0,0,0},
{"cdjb","std::string","character varying",2,0,0,0},
{"mj","double","double precision",8,0,0,0},
{"ccl","double","double precision",8,0,0,0},
{"zxl","double","double precision",8,0,0,0},
{"bz","std::string","character varying",255,0,0,0},
{"cddb","std::string","character varying",2,0,0,0},
{"shape_length","double","double precision",8,0,0,0},
{"shape_area","double","double precision",8,0,0,0},
{"shape","std::string","USER-DEFINED",0,0,0,0}
};
const std::string &Jbcy2569520::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Jbcy2569520::Jbcy2569520(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["objectid"].isNull())
        {
            objectid_=std::make_shared<int32_t>(r["objectid"].as<int32_t>());
        }
        if(!r["bsm"].isNull())
        {
            bsm_=std::make_shared<std::string>(r["bsm"].as<std::string>());
        }
        if(!r["ysdm"].isNull())
        {
            ysdm_=std::make_shared<std::string>(r["ysdm"].as<std::string>());
        }
        if(!r["xzqdm"].isNull())
        {
            xzqdm_=std::make_shared<std::string>(r["xzqdm"].as<std::string>());
        }
        if(!r["xzqmc"].isNull())
        {
            xzqmc_=std::make_shared<std::string>(r["xzqmc"].as<std::string>());
        }
        if(!r["mc"].isNull())
        {
            mc_=std::make_shared<std::string>(r["mc"].as<std::string>());
        }
        if(!r["lx"].isNull())
        {
            lx_=std::make_shared<std::string>(r["lx"].as<std::string>());
        }
        if(!r["cdjb"].isNull())
        {
            cdjb_=std::make_shared<std::string>(r["cdjb"].as<std::string>());
        }
        if(!r["mj"].isNull())
        {
            mj_=std::make_shared<double>(r["mj"].as<double>());
        }
        if(!r["ccl"].isNull())
        {
            ccl_=std::make_shared<double>(r["ccl"].as<double>());
        }
        if(!r["zxl"].isNull())
        {
            zxl_=std::make_shared<double>(r["zxl"].as<double>());
        }
        if(!r["bz"].isNull())
        {
            bz_=std::make_shared<std::string>(r["bz"].as<std::string>());
        }
        if(!r["cddb"].isNull())
        {
            cddb_=std::make_shared<std::string>(r["cddb"].as<std::string>());
        }
        if(!r["shape_length"].isNull())
        {
            shapeLength_=std::make_shared<double>(r["shape_length"].as<double>());
        }
        if(!r["shape_area"].isNull())
        {
            shapeArea_=std::make_shared<double>(r["shape_area"].as<double>());
        }
        if(!r["shape"].isNull())
        {
            shape_=std::make_shared<std::string>(r["shape"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 16 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            objectid_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            bsm_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            ysdm_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            xzqdm_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            xzqmc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            mc_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            lx_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            cdjb_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            mj_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            ccl_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            zxl_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            bz_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            cddb_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            shapeLength_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            shapeArea_=std::make_shared<double>(r[index].as<double>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            shape_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Jbcy2569520::Jbcy2569520(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            objectid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bsm_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ysdm_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            xzqdm_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            xzqmc_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            mc_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            lx_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            cdjb_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            mj_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            ccl_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            zxl_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bz_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            cddb_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shapeLength_=std::make_shared<double>(pJson[pMasqueradingVector[13]].asDouble());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shapeArea_=std::make_shared<double>(pJson[pMasqueradingVector[14]].asDouble());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shape_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
}

Jbcy2569520::Jbcy2569520(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("objectid"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["objectid"].isNull())
        {
            objectid_=std::make_shared<int32_t>((int32_t)pJson["objectid"].asInt64());
        }
    }
    if(pJson.isMember("bsm"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["bsm"].isNull())
        {
            bsm_=std::make_shared<std::string>(pJson["bsm"].asString());
        }
    }
    if(pJson.isMember("ysdm"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["ysdm"].isNull())
        {
            ysdm_=std::make_shared<std::string>(pJson["ysdm"].asString());
        }
    }
    if(pJson.isMember("xzqdm"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["xzqdm"].isNull())
        {
            xzqdm_=std::make_shared<std::string>(pJson["xzqdm"].asString());
        }
    }
    if(pJson.isMember("xzqmc"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["xzqmc"].isNull())
        {
            xzqmc_=std::make_shared<std::string>(pJson["xzqmc"].asString());
        }
    }
    if(pJson.isMember("mc"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["mc"].isNull())
        {
            mc_=std::make_shared<std::string>(pJson["mc"].asString());
        }
    }
    if(pJson.isMember("lx"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["lx"].isNull())
        {
            lx_=std::make_shared<std::string>(pJson["lx"].asString());
        }
    }
    if(pJson.isMember("cdjb"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["cdjb"].isNull())
        {
            cdjb_=std::make_shared<std::string>(pJson["cdjb"].asString());
        }
    }
    if(pJson.isMember("mj"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["mj"].isNull())
        {
            mj_=std::make_shared<double>(pJson["mj"].asDouble());
        }
    }
    if(pJson.isMember("ccl"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["ccl"].isNull())
        {
            ccl_=std::make_shared<double>(pJson["ccl"].asDouble());
        }
    }
    if(pJson.isMember("zxl"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["zxl"].isNull())
        {
            zxl_=std::make_shared<double>(pJson["zxl"].asDouble());
        }
    }
    if(pJson.isMember("bz"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["bz"].isNull())
        {
            bz_=std::make_shared<std::string>(pJson["bz"].asString());
        }
    }
    if(pJson.isMember("cddb"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["cddb"].isNull())
        {
            cddb_=std::make_shared<std::string>(pJson["cddb"].asString());
        }
    }
    if(pJson.isMember("shape_length"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["shape_length"].isNull())
        {
            shapeLength_=std::make_shared<double>(pJson["shape_length"].asDouble());
        }
    }
    if(pJson.isMember("shape_area"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["shape_area"].isNull())
        {
            shapeArea_=std::make_shared<double>(pJson["shape_area"].asDouble());
        }
    }
    if(pJson.isMember("shape"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["shape"].isNull())
        {
            shape_=std::make_shared<std::string>(pJson["shape"].asString());
        }
    }
}

void Jbcy2569520::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 16)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            objectid_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            bsm_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            ysdm_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            xzqdm_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            xzqmc_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            mc_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            lx_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            cdjb_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            mj_=std::make_shared<double>(pJson[pMasqueradingVector[8]].asDouble());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            ccl_=std::make_shared<double>(pJson[pMasqueradingVector[9]].asDouble());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            zxl_=std::make_shared<double>(pJson[pMasqueradingVector[10]].asDouble());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            bz_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            cddb_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            shapeLength_=std::make_shared<double>(pJson[pMasqueradingVector[13]].asDouble());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            shapeArea_=std::make_shared<double>(pJson[pMasqueradingVector[14]].asDouble());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            shape_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
}

void Jbcy2569520::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("objectid"))
    {
        if(!pJson["objectid"].isNull())
        {
            objectid_=std::make_shared<int32_t>((int32_t)pJson["objectid"].asInt64());
        }
    }
    if(pJson.isMember("bsm"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["bsm"].isNull())
        {
            bsm_=std::make_shared<std::string>(pJson["bsm"].asString());
        }
    }
    if(pJson.isMember("ysdm"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["ysdm"].isNull())
        {
            ysdm_=std::make_shared<std::string>(pJson["ysdm"].asString());
        }
    }
    if(pJson.isMember("xzqdm"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["xzqdm"].isNull())
        {
            xzqdm_=std::make_shared<std::string>(pJson["xzqdm"].asString());
        }
    }
    if(pJson.isMember("xzqmc"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["xzqmc"].isNull())
        {
            xzqmc_=std::make_shared<std::string>(pJson["xzqmc"].asString());
        }
    }
    if(pJson.isMember("mc"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["mc"].isNull())
        {
            mc_=std::make_shared<std::string>(pJson["mc"].asString());
        }
    }
    if(pJson.isMember("lx"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["lx"].isNull())
        {
            lx_=std::make_shared<std::string>(pJson["lx"].asString());
        }
    }
    if(pJson.isMember("cdjb"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["cdjb"].isNull())
        {
            cdjb_=std::make_shared<std::string>(pJson["cdjb"].asString());
        }
    }
    if(pJson.isMember("mj"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["mj"].isNull())
        {
            mj_=std::make_shared<double>(pJson["mj"].asDouble());
        }
    }
    if(pJson.isMember("ccl"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["ccl"].isNull())
        {
            ccl_=std::make_shared<double>(pJson["ccl"].asDouble());
        }
    }
    if(pJson.isMember("zxl"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["zxl"].isNull())
        {
            zxl_=std::make_shared<double>(pJson["zxl"].asDouble());
        }
    }
    if(pJson.isMember("bz"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["bz"].isNull())
        {
            bz_=std::make_shared<std::string>(pJson["bz"].asString());
        }
    }
    if(pJson.isMember("cddb"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["cddb"].isNull())
        {
            cddb_=std::make_shared<std::string>(pJson["cddb"].asString());
        }
    }
    if(pJson.isMember("shape_length"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["shape_length"].isNull())
        {
            shapeLength_=std::make_shared<double>(pJson["shape_length"].asDouble());
        }
    }
    if(pJson.isMember("shape_area"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["shape_area"].isNull())
        {
            shapeArea_=std::make_shared<double>(pJson["shape_area"].asDouble());
        }
    }
    if(pJson.isMember("shape"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["shape"].isNull())
        {
            shape_=std::make_shared<std::string>(pJson["shape"].asString());
        }
    }
}

const int32_t &Jbcy2569520::getValueOfObjectid() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(objectid_)
        return *objectid_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Jbcy2569520::getObjectid() const noexcept
{
    return objectid_;
}
void Jbcy2569520::setObjectid(const int32_t &pObjectid) noexcept
{
    objectid_ = std::make_shared<int32_t>(pObjectid);
    dirtyFlag_[0] = true;
}
const typename Jbcy2569520::PrimaryKeyType & Jbcy2569520::getPrimaryKey() const
{
    assert(objectid_);
    return *objectid_;
}

const std::string &Jbcy2569520::getValueOfBsm() const noexcept
{
    static const std::string defaultValue = std::string();
    if(bsm_)
        return *bsm_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getBsm() const noexcept
{
    return bsm_;
}
void Jbcy2569520::setBsm(const std::string &pBsm) noexcept
{
    bsm_ = std::make_shared<std::string>(pBsm);
    dirtyFlag_[1] = true;
}
void Jbcy2569520::setBsm(std::string &&pBsm) noexcept
{
    bsm_ = std::make_shared<std::string>(std::move(pBsm));
    dirtyFlag_[1] = true;
}
void Jbcy2569520::setBsmToNull() noexcept
{
    bsm_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Jbcy2569520::getValueOfYsdm() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ysdm_)
        return *ysdm_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getYsdm() const noexcept
{
    return ysdm_;
}
void Jbcy2569520::setYsdm(const std::string &pYsdm) noexcept
{
    ysdm_ = std::make_shared<std::string>(pYsdm);
    dirtyFlag_[2] = true;
}
void Jbcy2569520::setYsdm(std::string &&pYsdm) noexcept
{
    ysdm_ = std::make_shared<std::string>(std::move(pYsdm));
    dirtyFlag_[2] = true;
}
void Jbcy2569520::setYsdmToNull() noexcept
{
    ysdm_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Jbcy2569520::getValueOfXzqdm() const noexcept
{
    static const std::string defaultValue = std::string();
    if(xzqdm_)
        return *xzqdm_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getXzqdm() const noexcept
{
    return xzqdm_;
}
void Jbcy2569520::setXzqdm(const std::string &pXzqdm) noexcept
{
    xzqdm_ = std::make_shared<std::string>(pXzqdm);
    dirtyFlag_[3] = true;
}
void Jbcy2569520::setXzqdm(std::string &&pXzqdm) noexcept
{
    xzqdm_ = std::make_shared<std::string>(std::move(pXzqdm));
    dirtyFlag_[3] = true;
}
void Jbcy2569520::setXzqdmToNull() noexcept
{
    xzqdm_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Jbcy2569520::getValueOfXzqmc() const noexcept
{
    static const std::string defaultValue = std::string();
    if(xzqmc_)
        return *xzqmc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getXzqmc() const noexcept
{
    return xzqmc_;
}
void Jbcy2569520::setXzqmc(const std::string &pXzqmc) noexcept
{
    xzqmc_ = std::make_shared<std::string>(pXzqmc);
    dirtyFlag_[4] = true;
}
void Jbcy2569520::setXzqmc(std::string &&pXzqmc) noexcept
{
    xzqmc_ = std::make_shared<std::string>(std::move(pXzqmc));
    dirtyFlag_[4] = true;
}
void Jbcy2569520::setXzqmcToNull() noexcept
{
    xzqmc_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Jbcy2569520::getValueOfMc() const noexcept
{
    static const std::string defaultValue = std::string();
    if(mc_)
        return *mc_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getMc() const noexcept
{
    return mc_;
}
void Jbcy2569520::setMc(const std::string &pMc) noexcept
{
    mc_ = std::make_shared<std::string>(pMc);
    dirtyFlag_[5] = true;
}
void Jbcy2569520::setMc(std::string &&pMc) noexcept
{
    mc_ = std::make_shared<std::string>(std::move(pMc));
    dirtyFlag_[5] = true;
}
void Jbcy2569520::setMcToNull() noexcept
{
    mc_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Jbcy2569520::getValueOfLx() const noexcept
{
    static const std::string defaultValue = std::string();
    if(lx_)
        return *lx_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getLx() const noexcept
{
    return lx_;
}
void Jbcy2569520::setLx(const std::string &pLx) noexcept
{
    lx_ = std::make_shared<std::string>(pLx);
    dirtyFlag_[6] = true;
}
void Jbcy2569520::setLx(std::string &&pLx) noexcept
{
    lx_ = std::make_shared<std::string>(std::move(pLx));
    dirtyFlag_[6] = true;
}
void Jbcy2569520::setLxToNull() noexcept
{
    lx_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Jbcy2569520::getValueOfCdjb() const noexcept
{
    static const std::string defaultValue = std::string();
    if(cdjb_)
        return *cdjb_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getCdjb() const noexcept
{
    return cdjb_;
}
void Jbcy2569520::setCdjb(const std::string &pCdjb) noexcept
{
    cdjb_ = std::make_shared<std::string>(pCdjb);
    dirtyFlag_[7] = true;
}
void Jbcy2569520::setCdjb(std::string &&pCdjb) noexcept
{
    cdjb_ = std::make_shared<std::string>(std::move(pCdjb));
    dirtyFlag_[7] = true;
}
void Jbcy2569520::setCdjbToNull() noexcept
{
    cdjb_.reset();
    dirtyFlag_[7] = true;
}

const double &Jbcy2569520::getValueOfMj() const noexcept
{
    static const double defaultValue = double();
    if(mj_)
        return *mj_;
    return defaultValue;
}
const std::shared_ptr<double> &Jbcy2569520::getMj() const noexcept
{
    return mj_;
}
void Jbcy2569520::setMj(const double &pMj) noexcept
{
    mj_ = std::make_shared<double>(pMj);
    dirtyFlag_[8] = true;
}
void Jbcy2569520::setMjToNull() noexcept
{
    mj_.reset();
    dirtyFlag_[8] = true;
}

const double &Jbcy2569520::getValueOfCcl() const noexcept
{
    static const double defaultValue = double();
    if(ccl_)
        return *ccl_;
    return defaultValue;
}
const std::shared_ptr<double> &Jbcy2569520::getCcl() const noexcept
{
    return ccl_;
}
void Jbcy2569520::setCcl(const double &pCcl) noexcept
{
    ccl_ = std::make_shared<double>(pCcl);
    dirtyFlag_[9] = true;
}
void Jbcy2569520::setCclToNull() noexcept
{
    ccl_.reset();
    dirtyFlag_[9] = true;
}

const double &Jbcy2569520::getValueOfZxl() const noexcept
{
    static const double defaultValue = double();
    if(zxl_)
        return *zxl_;
    return defaultValue;
}
const std::shared_ptr<double> &Jbcy2569520::getZxl() const noexcept
{
    return zxl_;
}
void Jbcy2569520::setZxl(const double &pZxl) noexcept
{
    zxl_ = std::make_shared<double>(pZxl);
    dirtyFlag_[10] = true;
}
void Jbcy2569520::setZxlToNull() noexcept
{
    zxl_.reset();
    dirtyFlag_[10] = true;
}

const std::string &Jbcy2569520::getValueOfBz() const noexcept
{
    static const std::string defaultValue = std::string();
    if(bz_)
        return *bz_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getBz() const noexcept
{
    return bz_;
}
void Jbcy2569520::setBz(const std::string &pBz) noexcept
{
    bz_ = std::make_shared<std::string>(pBz);
    dirtyFlag_[11] = true;
}
void Jbcy2569520::setBz(std::string &&pBz) noexcept
{
    bz_ = std::make_shared<std::string>(std::move(pBz));
    dirtyFlag_[11] = true;
}
void Jbcy2569520::setBzToNull() noexcept
{
    bz_.reset();
    dirtyFlag_[11] = true;
}

const std::string &Jbcy2569520::getValueOfCddb() const noexcept
{
    static const std::string defaultValue = std::string();
    if(cddb_)
        return *cddb_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getCddb() const noexcept
{
    return cddb_;
}
void Jbcy2569520::setCddb(const std::string &pCddb) noexcept
{
    cddb_ = std::make_shared<std::string>(pCddb);
    dirtyFlag_[12] = true;
}
void Jbcy2569520::setCddb(std::string &&pCddb) noexcept
{
    cddb_ = std::make_shared<std::string>(std::move(pCddb));
    dirtyFlag_[12] = true;
}
void Jbcy2569520::setCddbToNull() noexcept
{
    cddb_.reset();
    dirtyFlag_[12] = true;
}

const double &Jbcy2569520::getValueOfShapeLength() const noexcept
{
    static const double defaultValue = double();
    if(shapeLength_)
        return *shapeLength_;
    return defaultValue;
}
const std::shared_ptr<double> &Jbcy2569520::getShapeLength() const noexcept
{
    return shapeLength_;
}
void Jbcy2569520::setShapeLength(const double &pShapeLength) noexcept
{
    shapeLength_ = std::make_shared<double>(pShapeLength);
    dirtyFlag_[13] = true;
}
void Jbcy2569520::setShapeLengthToNull() noexcept
{
    shapeLength_.reset();
    dirtyFlag_[13] = true;
}

const double &Jbcy2569520::getValueOfShapeArea() const noexcept
{
    static const double defaultValue = double();
    if(shapeArea_)
        return *shapeArea_;
    return defaultValue;
}
const std::shared_ptr<double> &Jbcy2569520::getShapeArea() const noexcept
{
    return shapeArea_;
}
void Jbcy2569520::setShapeArea(const double &pShapeArea) noexcept
{
    shapeArea_ = std::make_shared<double>(pShapeArea);
    dirtyFlag_[14] = true;
}
void Jbcy2569520::setShapeAreaToNull() noexcept
{
    shapeArea_.reset();
    dirtyFlag_[14] = true;
}

const std::string &Jbcy2569520::getValueOfShape() const noexcept
{
    static const std::string defaultValue = std::string();
    if(shape_)
        return *shape_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Jbcy2569520::getShape() const noexcept
{
    return shape_;
}
void Jbcy2569520::setShape(const std::string &pShape) noexcept
{
    shape_ = std::make_shared<std::string>(pShape);
    dirtyFlag_[15] = true;
}
void Jbcy2569520::setShape(std::string &&pShape) noexcept
{
    shape_ = std::make_shared<std::string>(std::move(pShape));
    dirtyFlag_[15] = true;
}
void Jbcy2569520::setShapeToNull() noexcept
{
    shape_.reset();
    dirtyFlag_[15] = true;
}

void Jbcy2569520::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Jbcy2569520::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "bsm",
        "ysdm",
        "xzqdm",
        "xzqmc",
        "mc",
        "lx",
        "cdjb",
        "mj",
        "ccl",
        "zxl",
        "bz",
        "cddb",
        "shape_length",
        "shape_area",
        "shape"
    };
    return inCols;
}

void Jbcy2569520::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBsm())
        {
            binder << getValueOfBsm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getYsdm())
        {
            binder << getValueOfYsdm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getXzqdm())
        {
            binder << getValueOfXzqdm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getXzqmc())
        {
            binder << getValueOfXzqmc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMc())
        {
            binder << getValueOfMc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLx())
        {
            binder << getValueOfLx();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCdjb())
        {
            binder << getValueOfCdjb();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMj())
        {
            binder << getValueOfMj();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCcl())
        {
            binder << getValueOfCcl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getZxl())
        {
            binder << getValueOfZxl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBz())
        {
            binder << getValueOfBz();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCddb())
        {
            binder << getValueOfCddb();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShapeLength())
        {
            binder << getValueOfShapeLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShapeArea())
        {
            binder << getValueOfShapeArea();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShape())
        {
            binder << getValueOfShape();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Jbcy2569520::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    return ret;
}

void Jbcy2569520::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getBsm())
        {
            binder << getValueOfBsm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getYsdm())
        {
            binder << getValueOfYsdm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getXzqdm())
        {
            binder << getValueOfXzqdm();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getXzqmc())
        {
            binder << getValueOfXzqmc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getMc())
        {
            binder << getValueOfMc();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLx())
        {
            binder << getValueOfLx();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getCdjb())
        {
            binder << getValueOfCdjb();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getMj())
        {
            binder << getValueOfMj();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getCcl())
        {
            binder << getValueOfCcl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getZxl())
        {
            binder << getValueOfZxl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getBz())
        {
            binder << getValueOfBz();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getCddb())
        {
            binder << getValueOfCddb();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getShapeLength())
        {
            binder << getValueOfShapeLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getShapeArea())
        {
            binder << getValueOfShapeArea();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getShape())
        {
            binder << getValueOfShape();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Jbcy2569520::toJson() const
{
    Json::Value ret;
    if(getObjectid())
    {
        ret["objectid"]=getValueOfObjectid();
    }
    else
    {
        ret["objectid"]=Json::Value();
    }
    if(getBsm())
    {
        ret["bsm"]=getValueOfBsm();
    }
    else
    {
        ret["bsm"]=Json::Value();
    }
    if(getYsdm())
    {
        ret["ysdm"]=getValueOfYsdm();
    }
    else
    {
        ret["ysdm"]=Json::Value();
    }
    if(getXzqdm())
    {
        ret["xzqdm"]=getValueOfXzqdm();
    }
    else
    {
        ret["xzqdm"]=Json::Value();
    }
    if(getXzqmc())
    {
        ret["xzqmc"]=getValueOfXzqmc();
    }
    else
    {
        ret["xzqmc"]=Json::Value();
    }
    if(getMc())
    {
        ret["mc"]=getValueOfMc();
    }
    else
    {
        ret["mc"]=Json::Value();
    }
    if(getLx())
    {
        ret["lx"]=getValueOfLx();
    }
    else
    {
        ret["lx"]=Json::Value();
    }
    if(getCdjb())
    {
        ret["cdjb"]=getValueOfCdjb();
    }
    else
    {
        ret["cdjb"]=Json::Value();
    }
    if(getMj())
    {
        ret["mj"]=getValueOfMj();
    }
    else
    {
        ret["mj"]=Json::Value();
    }
    if(getCcl())
    {
        ret["ccl"]=getValueOfCcl();
    }
    else
    {
        ret["ccl"]=Json::Value();
    }
    if(getZxl())
    {
        ret["zxl"]=getValueOfZxl();
    }
    else
    {
        ret["zxl"]=Json::Value();
    }
    if(getBz())
    {
        ret["bz"]=getValueOfBz();
    }
    else
    {
        ret["bz"]=Json::Value();
    }
    if(getCddb())
    {
        ret["cddb"]=getValueOfCddb();
    }
    else
    {
        ret["cddb"]=Json::Value();
    }
    if(getShapeLength())
    {
        ret["shape_length"]=getValueOfShapeLength();
    }
    else
    {
        ret["shape_length"]=Json::Value();
    }
    if(getShapeArea())
    {
        ret["shape_area"]=getValueOfShapeArea();
    }
    else
    {
        ret["shape_area"]=Json::Value();
    }
    if(getShape())
    {
        ret["shape"]=getValueOfShape();
    }
    else
    {
        ret["shape"]=Json::Value();
    }
    return ret;
}

Json::Value Jbcy2569520::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 16)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getObjectid())
            {
                ret[pMasqueradingVector[0]]=getValueOfObjectid();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getBsm())
            {
                ret[pMasqueradingVector[1]]=getValueOfBsm();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getYsdm())
            {
                ret[pMasqueradingVector[2]]=getValueOfYsdm();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getXzqdm())
            {
                ret[pMasqueradingVector[3]]=getValueOfXzqdm();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getXzqmc())
            {
                ret[pMasqueradingVector[4]]=getValueOfXzqmc();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getMc())
            {
                ret[pMasqueradingVector[5]]=getValueOfMc();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getLx())
            {
                ret[pMasqueradingVector[6]]=getValueOfLx();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getCdjb())
            {
                ret[pMasqueradingVector[7]]=getValueOfCdjb();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getMj())
            {
                ret[pMasqueradingVector[8]]=getValueOfMj();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getCcl())
            {
                ret[pMasqueradingVector[9]]=getValueOfCcl();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getZxl())
            {
                ret[pMasqueradingVector[10]]=getValueOfZxl();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getBz())
            {
                ret[pMasqueradingVector[11]]=getValueOfBz();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getCddb())
            {
                ret[pMasqueradingVector[12]]=getValueOfCddb();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getShapeLength())
            {
                ret[pMasqueradingVector[13]]=getValueOfShapeLength();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getShapeArea())
            {
                ret[pMasqueradingVector[14]]=getValueOfShapeArea();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getShape())
            {
                ret[pMasqueradingVector[15]]=getValueOfShape();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getObjectid())
    {
        ret["objectid"]=getValueOfObjectid();
    }
    else
    {
        ret["objectid"]=Json::Value();
    }
    if(getBsm())
    {
        ret["bsm"]=getValueOfBsm();
    }
    else
    {
        ret["bsm"]=Json::Value();
    }
    if(getYsdm())
    {
        ret["ysdm"]=getValueOfYsdm();
    }
    else
    {
        ret["ysdm"]=Json::Value();
    }
    if(getXzqdm())
    {
        ret["xzqdm"]=getValueOfXzqdm();
    }
    else
    {
        ret["xzqdm"]=Json::Value();
    }
    if(getXzqmc())
    {
        ret["xzqmc"]=getValueOfXzqmc();
    }
    else
    {
        ret["xzqmc"]=Json::Value();
    }
    if(getMc())
    {
        ret["mc"]=getValueOfMc();
    }
    else
    {
        ret["mc"]=Json::Value();
    }
    if(getLx())
    {
        ret["lx"]=getValueOfLx();
    }
    else
    {
        ret["lx"]=Json::Value();
    }
    if(getCdjb())
    {
        ret["cdjb"]=getValueOfCdjb();
    }
    else
    {
        ret["cdjb"]=Json::Value();
    }
    if(getMj())
    {
        ret["mj"]=getValueOfMj();
    }
    else
    {
        ret["mj"]=Json::Value();
    }
    if(getCcl())
    {
        ret["ccl"]=getValueOfCcl();
    }
    else
    {
        ret["ccl"]=Json::Value();
    }
    if(getZxl())
    {
        ret["zxl"]=getValueOfZxl();
    }
    else
    {
        ret["zxl"]=Json::Value();
    }
    if(getBz())
    {
        ret["bz"]=getValueOfBz();
    }
    else
    {
        ret["bz"]=Json::Value();
    }
    if(getCddb())
    {
        ret["cddb"]=getValueOfCddb();
    }
    else
    {
        ret["cddb"]=Json::Value();
    }
    if(getShapeLength())
    {
        ret["shape_length"]=getValueOfShapeLength();
    }
    else
    {
        ret["shape_length"]=Json::Value();
    }
    if(getShapeArea())
    {
        ret["shape_area"]=getValueOfShapeArea();
    }
    else
    {
        ret["shape_area"]=Json::Value();
    }
    if(getShape())
    {
        ret["shape"]=getValueOfShape();
    }
    else
    {
        ret["shape"]=Json::Value();
    }
    return ret;
}

bool Jbcy2569520::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("objectid"))
    {
        if(!validJsonOfField(0, "objectid", pJson["objectid"], err, true))
            return false;
    }
    if(pJson.isMember("bsm"))
    {
        if(!validJsonOfField(1, "bsm", pJson["bsm"], err, true))
            return false;
    }
    if(pJson.isMember("ysdm"))
    {
        if(!validJsonOfField(2, "ysdm", pJson["ysdm"], err, true))
            return false;
    }
    if(pJson.isMember("xzqdm"))
    {
        if(!validJsonOfField(3, "xzqdm", pJson["xzqdm"], err, true))
            return false;
    }
    if(pJson.isMember("xzqmc"))
    {
        if(!validJsonOfField(4, "xzqmc", pJson["xzqmc"], err, true))
            return false;
    }
    if(pJson.isMember("mc"))
    {
        if(!validJsonOfField(5, "mc", pJson["mc"], err, true))
            return false;
    }
    if(pJson.isMember("lx"))
    {
        if(!validJsonOfField(6, "lx", pJson["lx"], err, true))
            return false;
    }
    if(pJson.isMember("cdjb"))
    {
        if(!validJsonOfField(7, "cdjb", pJson["cdjb"], err, true))
            return false;
    }
    if(pJson.isMember("mj"))
    {
        if(!validJsonOfField(8, "mj", pJson["mj"], err, true))
            return false;
    }
    if(pJson.isMember("ccl"))
    {
        if(!validJsonOfField(9, "ccl", pJson["ccl"], err, true))
            return false;
    }
    if(pJson.isMember("zxl"))
    {
        if(!validJsonOfField(10, "zxl", pJson["zxl"], err, true))
            return false;
    }
    if(pJson.isMember("bz"))
    {
        if(!validJsonOfField(11, "bz", pJson["bz"], err, true))
            return false;
    }
    if(pJson.isMember("cddb"))
    {
        if(!validJsonOfField(12, "cddb", pJson["cddb"], err, true))
            return false;
    }
    if(pJson.isMember("shape_length"))
    {
        if(!validJsonOfField(13, "shape_length", pJson["shape_length"], err, true))
            return false;
    }
    if(pJson.isMember("shape_area"))
    {
        if(!validJsonOfField(14, "shape_area", pJson["shape_area"], err, true))
            return false;
    }
    if(pJson.isMember("shape"))
    {
        if(!validJsonOfField(15, "shape", pJson["shape"], err, true))
            return false;
    }
    return true;
}
bool Jbcy2569520::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Jbcy2569520::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("objectid"))
    {
        if(!validJsonOfField(0, "objectid", pJson["objectid"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("bsm"))
    {
        if(!validJsonOfField(1, "bsm", pJson["bsm"], err, false))
            return false;
    }
    if(pJson.isMember("ysdm"))
    {
        if(!validJsonOfField(2, "ysdm", pJson["ysdm"], err, false))
            return false;
    }
    if(pJson.isMember("xzqdm"))
    {
        if(!validJsonOfField(3, "xzqdm", pJson["xzqdm"], err, false))
            return false;
    }
    if(pJson.isMember("xzqmc"))
    {
        if(!validJsonOfField(4, "xzqmc", pJson["xzqmc"], err, false))
            return false;
    }
    if(pJson.isMember("mc"))
    {
        if(!validJsonOfField(5, "mc", pJson["mc"], err, false))
            return false;
    }
    if(pJson.isMember("lx"))
    {
        if(!validJsonOfField(6, "lx", pJson["lx"], err, false))
            return false;
    }
    if(pJson.isMember("cdjb"))
    {
        if(!validJsonOfField(7, "cdjb", pJson["cdjb"], err, false))
            return false;
    }
    if(pJson.isMember("mj"))
    {
        if(!validJsonOfField(8, "mj", pJson["mj"], err, false))
            return false;
    }
    if(pJson.isMember("ccl"))
    {
        if(!validJsonOfField(9, "ccl", pJson["ccl"], err, false))
            return false;
    }
    if(pJson.isMember("zxl"))
    {
        if(!validJsonOfField(10, "zxl", pJson["zxl"], err, false))
            return false;
    }
    if(pJson.isMember("bz"))
    {
        if(!validJsonOfField(11, "bz", pJson["bz"], err, false))
            return false;
    }
    if(pJson.isMember("cddb"))
    {
        if(!validJsonOfField(12, "cddb", pJson["cddb"], err, false))
            return false;
    }
    if(pJson.isMember("shape_length"))
    {
        if(!validJsonOfField(13, "shape_length", pJson["shape_length"], err, false))
            return false;
    }
    if(pJson.isMember("shape_area"))
    {
        if(!validJsonOfField(14, "shape_area", pJson["shape_area"], err, false))
            return false;
    }
    if(pJson.isMember("shape"))
    {
        if(!validJsonOfField(15, "shape", pJson["shape"], err, false))
            return false;
    }
    return true;
}
bool Jbcy2569520::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 16)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Jbcy2569520::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson,
                                   std::string &err,
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 18)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 18)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 10)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 10)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 12)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 12)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 100)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 100)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 12:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 2)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 2)";
                return false;
            }

            break;
        case 13:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isNumeric())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
